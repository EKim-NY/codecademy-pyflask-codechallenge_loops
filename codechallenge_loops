
# Check if numbers are divisible by 10. 
def divisible_by_ten(nums): 
  count = 0 
  for num in nums: 
    if num % 10 == 0: 
      count += 1 
  return count 

print(divisible_by_ten([20, 25, 30, 35, 40]))


# Add a greeting to each name. 
def add_greetings(names): 
  lst = [] 
  lst = ["Hello, " + name for name in names] 
  return lst 

print(add_greetings(["Owen", "Max", "Sophie"])


# Delete starting even numbers using .pop() which returns a value. 
# Using a FOR loop will cause indexing errors b/c the indexes change with each slice. 

my_lst = [4, 8, 10, 11, 12, 15]
my_lst2 = [4, 8, 10] 

def delete_starting_evens(lst): 
  while len(lst) >= 1: 
    if lst[0] % 2 == 0: 
      front_even_value = lst.pop(0)
      # lst = lst[1:]
      print("Removed front even value ", front_even_value, " New list: ", lst)
    else: 
      continue
    
  return lst 

print("List", delete_starting_evens(my_lst))

# Delete starting even numbers using a WHILE loop. Why does program keep running in Repl.it? Output is as expected. 

def delete_starting_evens(lst):
    while len(lst) >= 1: 
        if lst[0] % 2 == 0: 
            lst = lst[1:]
            print("New list", lst) 
        else:    
            continue
    return lst

print("List 2", delete_starting_evens(my_lst2))

# Delete starting even numbers using two conditionals inside the WHILE loop. Solution given by Codecademy Pro. 

def delete_starting_evens(lst):
  while (len(lst) > 0 and lst[0] % 2 == 0):
    lst = lst[1:]
  return lst

print(delete_starting_evens([4, 8, 10, 11, 12, 15]))
print(delete_starting_evens([4, 8, 10]))


# Return odd indices. 
def odd_indices(lst): 
  lst_odd_index = [] 
  for i in range(len(lst)): 
    if i % 2 != 0: 
      lst_odd_index.append(lst[i])
  return lst_odd_index 

print(odd_indices([4, 3, 7, 10, 11, -2]))

# Obtain the same result by using a list comprehension and by introducing a step as a range parameter.

def odd_indices(lst): 
  lst_odd_index = [lst[i] for i in range(1, len(lst), 2)]
  return lst_odd_index

print(odd_indices([4, 3, 7, 10, 11, -2]))