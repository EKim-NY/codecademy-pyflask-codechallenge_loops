
# Check if numbers are divisible by 10. 
def divisible_by_ten(nums): 
  count = 0 
  for num in nums: 
    if num % 10 == 0: 
      count += 1 
  return count 

print(divisible_by_ten([20, 25, 30, 35, 40]))


# Add a greeting to each name. 
def add_greetings(names): 
  lst = [] 
  lst = ["Hello, " + name for name in names] 
  return lst 

print(add_greetings(["Owen", "Max", "Sophie"])


# Delete starting even numbers using .pop() which returns a value. 
# Using a FOR loop will cause indexing errors b/c the indexes change with each slice. 

my_lst = [4, 8, 10, 11, 12, 15]
my_lst2 = [4, 8, 10] 

def delete_starting_evens(lst): 
  while len(lst) >= 1: 
    if lst[0] % 2 == 0: 
      front_even_value = lst.pop(0)
      # lst = lst[1:]
      print("Removed front even value ", front_even_value, " New list: ", lst)
    else: 
      continue
    
  return lst 

print("List", delete_starting_evens(my_lst))

# Delete starting even numbers using a WHILE loop. Why does program keep running in Repl.it? Output is as expected. 

def delete_starting_evens(lst):
    while len(lst) >= 1: 
        if lst[0] % 2 == 0: 
            lst = lst[1:]
            print("New list", lst) 
        else:    
            continue
    return lst

print("List 2", delete_starting_evens(my_lst2))

# Delete starting even numbers using two conditionals inside the WHILE loop. Solution given by Codecademy Pro. 

def delete_starting_evens(lst):
  while (len(lst) > 0 and lst[0] % 2 == 0):
    lst = lst[1:]
  return lst

print(delete_starting_evens([4, 8, 10, 11, 12, 15]))
print(delete_starting_evens([4, 8, 10]))


# Return odd indices. 
def odd_indices(lst): 
  lst_odd_index = [] 
  for i in range(len(lst)): 
    if i % 2 != 0: 
      lst_odd_index.append(lst[i])
  return lst_odd_index 

print(odd_indices([4, 3, 7, 10, 11, -2]))

# Obtain the same result by using a list comprehension and by introducing a step as a range parameter.

def odd_indices(lst): 
  lst_odd_index = [lst[i] for i in range(1, len(lst), 2)]
  return lst_odd_index

print(odd_indices([4, 3, 7, 10, 11, -2]))


# Return the values of bases raised to their respective powers. 
def exponents(bases, powers): 
  raised = []
  for base in bases: 
    for power in powers: 
      raised.append(base ** power)
  return raised 

print(exponents([2, 3, 4], [1, 2, 3]))


# Return the list whose sum of values is greater. 
def larger_sum(lst1, lst2): 
  # sum1 = sum(lst1) 
  # sum2 = sum(lst2) 
  sum1 = 0
  sum2 = 0 

  for i in range(len(lst1)): 
    sum1 += lst1[i]

  for x in range(len(lst2)): 
    sum2 += lst2[i]

  if sum1 == sum2: 
    return lst1 
  elif sum1 > sum2: 
    return lst1
  else: 
    return lst2

print(larger_sum([1, 9, 5], [2, 3, 7]))


# Sum the elements of the list until sum is greater than 9000. 
def over_nine_thousand(lst): 
  sum = 0 
  if len(lst) == 0: 
    return 0 
  else: 
    for i in range(len(lst)): 
      if sum <= 9000: 
        sum += lst[i]
      else: 
        break 
    return sum 

print(over_nine_thousand([]))
print(over_nine_thousand([8000, 900, 120, 5000]))

# Shorter solution to the same problem. 

def over_nine_thousand(lst):
  sum = 0
  for number in lst:
    sum += number
    if (sum > 9000):
      break
  return sum

print(over_nine_thousand([8000, 900, 120, 5000]))


# Find the maximum value using iteration. 
def max_num(nums): 

  for i in range(len(nums)-1): 
    if nums[i] < nums[i+1]: 
      max = nums[i+1]
    else: 
      max = nums[i]
    i += 1 
  return max 

print(max_num([50, -10, 0, 75, 20]))

# for i = 0 to 4: 
# i     max 
# 0     50 
# 1     0 
# 2     75 
# 3     75 

# max = 75 